.libPaths()
install.packages("caret")
1+1
library(caret)
install.packages('stringi')
library(caret)
mypackages <- c("dplyr","data.table", "lubridate", "corrplot","forecast","ada","xgboost",
"magrittr", "randomForest", "e1071", "TTR", "quantmod", "xlsx", 'fmsb', "scales",
"lmtest", "fastDummies", "fUnitRoots", "car", "tseries")
sapply(mypackages, install.packages, character.only = T)
sapply(mypackages, require, character.only = T)
install.packages('xlsx')
install.packages('rJava')
install.packages('xlax')
install.packages('xlsx')
install.packages('keras')
devtools::install_github("rstudio/keras")
install.packages('devtools')
devtools::install_github("rstudio/keras")
install_keras()
keras::install_keras()
library(keras)
mnist <- dataset_mnist()
model <- keras_model_sequential()
x_train <- mnist$train$x
y_train <- mnist$train$y
x_test <- mnist$test$x
y_test <- mnist$test$y
x_train <- array_reshape(x_train, c(nrow(x_train), 784))
x_test <- array_reshape(x_test, c(nrow(x_test), 784))
# rescale
x_train <- x_train / 255
x_test <- x_test / 255
y_train <- to_categorical(y_train, 10)
y_test <- to_categorical(y_test, 10)
model <- keras_model_sequential()
model %>%
layer_dense(units = 256, activation = 'relu', input_shape = c(784)) %>%
layer_dropout(rate = 0.4) %>%
layer_dense(units = 128, activation = 'relu') %>%
layer_dropout(rate = 0.3) %>%
layer_dense(units = 10, activation = 'softmax')
summary(model)
model %>% compile(
loss = 'categorical_crossentropy',
optimizer = optimizer_rmsprop(),
metrics = c('accuracy')
)
history <- model %>% fit(
x_train, y_train,
epochs = 30, batch_size = 128,
validation_split = 0.2
)
plot(history)
library(xlsx)
install.packages('xlsx')
install.packages("readxl")
library(readxl)
read_excel("C:\\Users\\Jerome\\Desktop\\NUS Masters of Technology\\Sem3\\Day 3\\Demo_Workshop Data\\CHOL sample ser.xlsx")
read_excel("C:\\Users\\Jerome\\Desktop\\NUS Masters of Technology\\Sem3\\Day 3\\Demo_Workshop Data\\CHOL sample set.xlsx")
source('C:/Users/Jerome/Desktop/JeromeR.R', echo=TRUE)
# Resize & and size new dimension pics
str(train)
library(keras)
library(EBImage)
library(wvtool)
wtf <- function(x) {
tmpfile = strsplit(tempfile(), split = "[\\]") %>% unlist %>% head(7) %>% paste(collapse = '/')
tempfile2 = deparse(substitute(x))
fn = paste(tmpfile, tempfile2, sep = '/')
x2 = as.data.frame(x)
out = try(write.table(x2, file = paste0(fn,".csv"), sep = ",", row.names = F, col.names = T))
if (class(out) == "try-error") {
DefaultTotemp <- tempfile()
write.table(x2, file = paste0(DefaultTotemp,".csv"), sep = ",", row.names = F, col.names = T)
shell.exec(paste0(DefaultTotemp, ".csv"))
} else {
shell.exec(paste0(fn, ".csv"))
}
}
# set wd
setwd('C:\\Users\\Jerome\\Capstone')
trainfiles <- paste0(paste0(getwd(), "\\Train_Imgs\\"), list.files(path = paste0(getwd(), "\\Train_Imgs")))
testfiles <- paste0(paste0(getwd(), "\\Test_Imgs\\"), list.files(path = paste0(getwd(), "\\Test_Imgs")))
map1 <- paste0(paste0(getwd(), "\\Maps1_T\\"), list.files(path = paste0(getwd(), "\\Maps1_T")))
map2 <- paste0(paste0(getwd(), "\\Maps2_T\\"), list.files(path = paste0(getwd(), "\\Maps2_T")))
map3 <- paste0(paste0(getwd(), "\\Maps3_T\\"), list.files(path = paste0(getwd(), "\\Maps3_T")))
map4 <- paste0(paste0(getwd(), "\\Maps4_T\\"), list.files(path = paste0(getwd(), "\\Maps4_T")))
map5 <- paste0(paste0(getwd(), "\\Maps5_T\\"), list.files(path = paste0(getwd(), "\\Maps5_T")))
map6 <- paste0(paste0(getwd(), "\\Maps6_T\\"), list.files(path = paste0(getwd(), "\\Maps6_T")))
4.04-1.45
map1
list.files(path = paste0(getwd(), "\\Maps1_T"))
list.files(path = paste0(getwd(), "\\Maps1_T"))
i=1
InputDrive = paste0(getwd(), "\\Maps1_T")
InputDrive
files <- list.files(path = InputDrive)
files
img <- readImage(paste0(InputDrive, "/", files[i]))
img
img <- resize(img, l, w)
l=500
w-500
w=500
img <- resize(img, l, w)
img
InputDrive
files[i]
outputDrive
outputDrive = "C:\\Users\\Jerome\\Capstone\\Maps1_T_resized"
writeImage(img, file = paste0(outputDrive, "/", files[i]))
resizeImagesAndSave <- function(InputDrive, outputDrive, l, w) {
files <- list.files(path = InputDrive)
res <- list()
for (i in 1:length(files)) {
img <- readImage(paste0(InputDrive, "/", files[i]))
img <- resize(img, l, w)
writeImage(img, file = paste0(outputDrive, "/", files[i]))
}
}
resizeImagesAndSave("C:\\Users\\Jerome\\Capstone\\Map1_T", "C:\\Users\\Jerome\\Capstone\\Map1_T_resized", 500, 500)
resizeImagesAndSave("C:\\Users\\Jerome\\Capstone\\Maps1_T", "C:\\Users\\Jerome\\Capstone\\Maps1_T_resized", 500, 500)
resizeImagesAndSave <- function(InputDrive, outputDrive, l, w) {
files <- list.files(path = InputDrive)
res <- list()
for (i in 1:length(files)) {
img <- readImage(paste0(InputDrive, "/", files[i]))
img <- resize(img, l, w)
writeImage(img, file = paste0(outputDrive, "/", files[i]))
}
gc()
}
resizeImagesAndSave("C:\\Users\\Jerome\\Capstone\\Maps2_T", "C:\\Users\\Jerome\\Capstone\\Maps2_T_resized", 500, 500)
resizeImagesAndSave("C:\\Users\\Jerome\\Capstone\\Maps3_T", "C:\\Users\\Jerome\\Capstone\\Maps3_T_resized", 500, 500)
resizeImagesAndSave("C:\\Users\\Jerome\\Capstone\\Maps4_T", "C:\\Users\\Jerome\\Capstone\\Maps4_T_resized", 500, 500)
resizeImagesAndSave("C:\\Users\\Jerome\\Capstone\\Maps5_T", "C:\\Users\\Jerome\\Capstone\\Maps5_T_resized", 500, 500)
resizeImagesAndSave("C:\\Users\\Jerome\\Capstone\\Maps6_T", "C:\\Users\\Jerome\\Capstone\\Maps6_T_resized", 500, 500)
resizeImagesAndSave("C:\\Users\\Jerome\\Capstone\\Train_imgs", "C:\\Users\\Jerome\\Capstone\\Train_imgs_resized", 500, 500)
resizeImagesAndSave("C:\\Users\\Jerome\\Capstone\\Test_imgs", "C:\\Users\\Jerome\\Capstone\\Test_imgs_resized", 500, 500)
print(sprintf("%s -- %s of out %s done", InputDrive, i, length(files)))
print(sprintf("%s ------ %s of out %s done", InputDrive, i, length(files)))
resizeImagesAndSave <- function(InputDrive, outputDrive, l, w) {
files <- list.files(path = InputDrive)
res <- list()
for (i in 1:length(files)) {
img <- readImage(paste0(InputDrive, "/", files[i]))
img <- resize(img, l, w)
writeImage(img, file = paste0(outputDrive, "/", files[i]))
print(sprintf("%s ------ %s of out %s done", InputDrive, i, length(files)))
}
gc()
}
resizeImagesAndSave("C:\\Users\\Jerome\\Capstone\\Maps1_T", "C:\\Users\\Jerome\\Capstone\\Maps1_T_resized", 500, 500)
resizeImagesAndSave("C:\\Users\\Jerome\\Capstone\\Maps2_T", "C:\\Users\\Jerome\\Capstone\\Maps2_T_resized", 500, 500)
resizeImagesAndSave("C:\\Users\\Jerome\\Capstone\\Maps3_T", "C:\\Users\\Jerome\\Capstone\\Maps3_T_resized", 500, 500)
resizeImagesAndSave("C:\\Users\\Jerome\\Capstone\\Maps4_T", "C:\\Users\\Jerome\\Capstone\\Maps4_T_resized", 500, 500)
resizeImagesAndSave("C:\\Users\\Jerome\\Capstone\\Maps5_T", "C:\\Users\\Jerome\\Capstone\\Maps5_T_resized", 500, 500)
resizeImagesAndSave("C:\\Users\\Jerome\\Capstone\\Maps6_T", "C:\\Users\\Jerome\\Capstone\\Maps6_T_resized", 500, 500)
resizeImagesAndSave("C:\\Users\\Jerome\\Capstone\\Train_imgs", "C:\\Users\\Jerome\\Capstone\\Train_imgs_resized", 500, 500)
resizeImagesAndSave("C:\\Users\\Jerome\\Capstone\\Test_imgs", "C:\\Users\\Jerome\\Capstone\\Test_imgs_resized", 500, 500)
